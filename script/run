#!/usr/bin/env ruby

require  File.expand_path(File.dirname(__FILE__) + "/../lib/buildmeister")
require 'activesupport'

puts "Starting up BuildMeister..."

def notify  
  bm    = Buildmeister.new('Macchiato')
  while true do  
    title = "BuildMeister: #{Time.now.strftime("%m/%d %I:%M %p")}"
    body  = <<eos
Staging
---------
Ready: #{bm.ready.tickets_count}
Staged: #{bm.staged.tickets_count}
Verified: #{bm.verified.tickets_count}

Master
---------
Ready: #{bm.ready_experimental.tickets_count}
Staged: #{bm.staged_experimental.tickets_count}
Verified: #{bm.verified_experimental.tickets_count}
eos

    puts "Updated notification at #{Time.now.strftime("%m/%d %I:%M %p")}"

    if bm.changed?
      post_notification(title, body)   
    end

    sleep 5.minutes.to_i

    bm.reload_info
  end
end

def stage_all
  env = ARGV.first

  bm = Buildmeister.new('Macchiato')
  bm.move_all(["ready", env].compact.join('_'), :to_state => 'staged')

  puts 'All ready tickets marked "staged"'
end

def resolve_verified
  bm = Buildmeister.new('Macchiato')
  bm.resolve_verified

  puts 'All verified tickets marked "resolved"'
end

def post_notification(title, body)
  `growlnotify -s -n "Lighthouse" -a "Lighthouse" -d 'buildmeister' -t "#{title}" -m "#{body}"`
end

begin
  send ARGV.shift
rescue Interrupt => i
  post_notification("Buildmeister Shut Down", "Goodbye!")
  puts "\rThank you for using Buildmeister!"
rescue Exception => e
  post_notification("Buildmeister Error: #{e.class}", e.message)
  puts "Quitting Buildmeister due to error: #{e.message}"
end
